name: CI/CD

on:
  push:
    branches: [ master ]
    tags: '*'
  pull_request:


jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', '3.11']
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v1
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            pypi.org:443

      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: 1.3.2

      - name: Install with Poetry
        run: poetry install

      - name: Linting with ruff
        run: poetry run ruff .

      - name: Static type checking with mypy
        run: poetry run mypy .

      - name: Code formatting with black
        run: poetry run black --check .

      - name: Set COVERAGE_FILE in environment
        run: echo "COVERAGE_FILE=.coverage.${{ matrix.python-version }}" >> $GITHUB_ENV

      - name: Run tests with pytest and compute coverage
        run: poetry run coverage run -m pytest -v tests/

      - name: Upload code coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: ".coverage.*"
          if-no-files-found: ignore

  coverage:
    name: Combine and check coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v1
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            api.github.com:443
            pypi.org:443

      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.3.2

      - name: Install airflow-dbt-python with Poetry
        run: poetry install

      - name: Download coverage data.
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <95%.
        run: |
          poetry run coverage combine
          poetry run coverage html --skip-covered --skip-empty
          poetry run coverage json
          # Save in env variable for badge
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          # Report and write to summary.
          poetry run coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          # Report again and fail if under 100%.
          poetry run coverage report --fail-under=95

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: html-report
          path: htmlcov

  publish:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v1
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            pypi.org:443

      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: 1.2.2

      - name: Install with Poetry
        run: poetry install

      - name: Build with Poetry
        run: poetry install

      - name: Publish with Poetry to PyPI
        run: poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
